{"version":3,"file":"static/js/15.986e01a9.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/contactsSelectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/views/ContactsView/ContactsView.module.css?919f","views/ContactsView/ContactsView.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"FormInput\":\"ContactForm_FormInput__s9Pni\",\"FormInput__input\":\"ContactForm_FormInput__input__SDPgr\",\"FormButton\":\"ContactForm_FormButton__pZccR\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport {\n\tuseAddContactMutation,\n\tuseGetContactsQuery,\n} from 'services/contactsApi';\n\nimport style from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n\tname: '',\n\tnumber: '',\n};\n\nconst ContactForm = () => {\n\tconst [name, setName] = useState(INITIAL_STATE.name);\n\tconst [number, setNumber] = useState(INITIAL_STATE.number);\n\n\tconst nameInputId = nanoid();\n\tconst numberInputId = nanoid();\n\tconst { data: contacts } = useGetContactsQuery();\n\tconst [addContact] = useAddContactMutation();\n\n\tconst onSubmit = event => {\n\t\tevent.preventDefault();\n\t\tif (\n\t\t\tcontacts.find(\n\t\t\t\tcontact => contact.name.toLowerCase() === name.toLowerCase()\n\t\t\t)\n\t\t) {\n\t\t\treturn Notify.failure(`Contact '${name}' is already exist`);\n\t\t}\n\t\tconst id = nanoid();\n\t\taddContact({ id, name, number });\n\t\treset();\n\t};\n\n\tconst reset = () => {\n\t\tsetName(INITIAL_STATE.name);\n\t\tsetNumber(INITIAL_STATE.number);\n\t};\n\n\treturn (\n\t\t<form className={style.FormInput} onSubmit={onSubmit}>\n\t\t\t<label htmlFor={nameInputId}>Name</label>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tname=\"name\"\n\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n\t\t\t\tmaxLength=\"40\"\n\t\t\t\trequired\n\t\t\t\tvalue={name}\n\t\t\t\tonChange={event => setName(event.target.value)}\n\t\t\t\tid={nameInputId}\n\t\t\t\tclassName={style.FormInput__input}\n\t\t\t/>\n\t\t\t<label htmlFor={numberInputId}>Number</label>\n\t\t\t<input\n\t\t\t\ttype=\"tel\"\n\t\t\t\tname=\"number\"\n\t\t\t\tpattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n\t\t\t\ttitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\t\t\t\tmaxLength=\"12\"\n\t\t\t\trequired\n\t\t\t\tvalue={number}\n\t\t\t\tonChange={event => setNumber(event.target.value)}\n\t\t\t\tid={numberInputId}\n\t\t\t\tclassName={style.FormInput__input}\n\t\t\t/>\n\t\t\t<button type=\"submit\" className={style.FormButton}>\n\t\t\t\tAdd Contact\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nexport default ContactForm;","export const getFilter = state => state.contactsReducer.filter;","// extracted by mini-css-extract-plugin\nexport default {\"ContactList__list\":\"ContactList_ContactList__list__WCX+2\",\"ContactList__item\":\"ContactList_ContactList__item__B+7D-\",\"ContactList__text\":\"ContactList_ContactList__text__EGfQe\",\"ContactList__button\":\"ContactList_ContactList__button__D3l59\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport style from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number }) => {\n\tconst [deleteContact] = useDeleteContactMutation();\n\treturn (\n\t\t<>\n\t\t\t<li className={style.ContactList__item} key={id}>\n\t\t\t\t<span className={style.ContactList__text}>\n\t\t\t\t\t{name}: {number}\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tclassName={style.ContactList__button}\n\t\t\t\t\tonClick={() => deleteContact(id)}\n\t\t\t\t>\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t</li>\n\t\t</>\n\t);\n};\n\nContactListItem.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tnumber: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","import { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { useGetContactsQuery } from 'services/contactsApi';\nimport ContactListItem from './ContactListItem';\nimport Loader from 'components/Loader';\nimport PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\n\nconst ContactList = () => {\n\tconst filter = useSelector(getFilter);\n\n\tconst { data: contacts, isFetching, isError } = useGetContactsQuery();\n\n\tconst filteredContacts =\n\t\tcontacts &&\n\t\tcontacts.filter(contact => contact.name.toLowerCase().includes(filter));\n\n\tconst isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n\treturn (\n\t\t<>\n\t\t\t{isFetching && <Loader color={'#3f51b5'} size={32} />}\n\t\t\t{isError && console.log(isError)}\n\t\t\t{isContactsEmpty ? (\n\t\t\t\t<ul className={style.ContactList__list}>\n\t\t\t\t\t{filteredContacts.map(({ id, name, number }) => (\n\t\t\t\t\t\t<ContactListItem key={id} id={id} name={name} number={number} />\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t) : (\n\t\t\t\t<ul className={style.ContactList__list}>\n\t\t\t\t\t<p>No contacts found...</p>\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nContactList.propTypes = {\n\tfilteredContacts: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tnumber: PropTypes.string.isRequired,\n\t\t})\n\t),\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"FilterContainer\":\"Filter_FilterContainer__7WMyd\",\"FilterInput\":\"Filter_FilterInput__-+rOd\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\nimport { filterContact } from 'redux/contacts/contactsActions';\n\nimport style from './Filter.module.css';\n\nconst Filter = () => {\n\tconst dispatch = useDispatch();\n\tconst filter = useSelector(getFilter);\n\n\treturn (\n\t\t<div className={style.FilterContainer}>\n\t\t\t<label>\n\t\t\t\tFind contacts by name\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"filter\"\n\t\t\t\t\tclassName={style.FilterInput}\n\t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n\t\t\t\t\ttitle=\"Find contacts by name\"\n\t\t\t\t\tplaceholder=\"Enter search request here\"\n\t\t\t\t\tvalue={filter}\n\t\t\t\t\tonChange={event => dispatch(filterContact(event))}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t</div>\n\t);\n};\n\nFilter.propTypes = {\n\tfilter: PropTypes.string,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsView_section__UJU9N\",\"title\":\"ContactsView_title__ATNZX\"};","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport styles from './ContactsView.module.css';\n\nexport default function ContactsView() {\n\treturn (\n\t\t<div className={styles.section}>\n\t\t\t<h1 className={styles.title}>PHONEBOOK</h1>\n\t\t\t<h2>New contact</h2>\n\t\t\t<ContactForm />\n\t\t\t<h2>Contacts</h2>\n\t\t\t<Filter />\n\t\t\t<ContactList />\n\t\t</div>\n\t);\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","INITIAL_STATE","useState","name","setName","number","setNumber","nameInputId","numberInputId","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","reset","className","style","onSubmit","event","preventDefault","find","contact","toLowerCase","Notify","htmlFor","type","pattern","title","maxLength","required","value","onChange","target","getFilter","state","contactsReducer","filter","useDeleteContactMutation","deleteContact","onClick","useSelector","isFetching","isError","filteredContacts","includes","isContactsEmpty","length","Loader","color","console","log","map","dispatch","useDispatch","placeholder","filterContact","ContactsView","styles"],"sourceRoot":""}